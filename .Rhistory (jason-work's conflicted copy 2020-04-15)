}
env_plottR()
env_plottR <- function(start_datetime = NULL, stop_datetime = NULL, daysLD = NULL, phaseLD = NULL, plotError = FALSE, durationL = 12, ...) {
if (!dir.exists("./figures/environmental/")) {
dir.create("./figures/environmental/", recursive = TRUE)
}
filename <- file.choose()
monitorID <- basename(tools::file_path_sans_ext(filename))
## read in raw data file
data <- fread(filename, stringsAsFactors = FALSE)
## convert time in data file to POSIX datetime
data[, time :=  as.POSIXct(paste(V2,V3), format="%d %b %y %H:%M:%S")]
## grab data columns and rename
data[, light := rowMeans(data[, 12:15])]
data[, temp := rowMeans(data[, 17:20])/10]
data[, humidity := rowMeans(data[, 22:25])]
if(plotError == TRUE) {
data[, error := as.numeric(V4)]
data <- data[, c("time", "light", "temp", "humidity", "error"), with = FALSE]
} else {
data <- data[, c("time", "light", "temp", "humidity"), with = FALSE]
}
## date, start and stop time and LD phase and LD days
if(is.null(start_datetime)) {
datestart <- min(data[, time])
} else {
datestart <- as.POSIXct(start_datetime, format = "%Y-%m-%d %H:%M:%S")
}
if(is.null(stop_datetime)) {
datestop <- max(data[, time])
} else {
datestop <- as.POSIXct(stop_datetime, format = "%Y-%m-%d %H:%M:%S")
}
if(is.null(phaseLD)) {
phaseLD <- hours(lubridate::hour(datestart))
} else {
phaseLD <- hours(phaseLD)
}
if(!is.null(daysLD)) {
dateLD <- datestart + days(daysLD)
}
## melt data
moltendata <- melt(data, id = c('time'), variable.name = 'env.cond', value.name = 'value')
if(exists("dateLD")) {
env.plot <- ggplot(data = moltendata[time %between% c(datestart, datestop)], aes(x = time, y = value, colour = env.cond)) +
stat_ld_annotations(phase = phaseLD, l_duration = hours(durationL), x_limits = c(datestart, dateLD),
ld_colours = c("yellow", "dark grey"),
alpha = 0.2, height = 1, outline = NA, ypos = "top") +
stat_ld_annotations(phase = hours(lubridate::hour(datestart)), x_limits = c(dateLD, datestop),
ld_colours = c("light grey", "dark grey"),
alpha = 0.2, height = 1, outline = NA, ypos = "top") +
geom_line() +
scale_x_datetime(breaks = scales::date_breaks('1 day'), expand = c(0,0)) +
facet_wrap( ~ env.cond, nrow = 3, scales = "free_y", labeller = label_wrap_gen(multi_line=FALSE)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
axis.title = element_blank(),
legend.position = "none")
} else {
env.plot <- ggplot(data = moltendata[time %between% c(datestart, datestop)], aes(x = time, y = value, colour = env.cond)) +
stat_ld_annotations(phase = phaseLD, l_duration = hours(durationL), x_limits = c(datestart, datestop),
ld_colours = c("yellow", "dark grey"),
alpha = 0.2, height = 1, outline = NA, ypos = "top") +
geom_line() +
scale_x_datetime(breaks = scales::date_breaks('1 day'), expand = c(0,0)) +
facet_wrap( ~ env.cond, nrow = 3, scales = "free_y", labeller = label_wrap_gen(multi_line=FALSE)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
axis.title = element_blank(),
legend.position = "none")
}
print(env.plot)
ggsave(filename = paste0("./figures/environmental/", monitorID, "_", datestart, "-", datestop, ".pdf"),
height = 27,
width = 48,
units = "cm",
plot = env.plot,
device = "pdf")
message("Figures output to /figures/environmental/")
}
env_plottR()
env_plottR(plotError = TRUE)
env_plottR(start_datetime = "2019-12-10 00:00:00", stop_datetime = "2019-12-16 00:00:00", phaseLD = 8, durationL = 13, daysLD = 2)
env_plottR <- function(start_datetime = NULL, stop_datetime = NULL, daysLD = NULL, phaseLD = NULL, plotError = FALSE, durationL = 12, ...) {
if (!dir.exists("./figures/environmental/")) {
dir.create("./figures/environmental/", recursive = TRUE)
}
filename <- file.choose()
monitorID <- basename(tools::file_path_sans_ext(filename))
## read in raw data file
data <- fread(filename, stringsAsFactors = FALSE)
## convert time in data file to POSIX datetime
data[, time :=  as.POSIXct(paste(V2,V3), format="%d %b %y %H:%M:%S")]
## grab data columns and rename
data[, light := rowMeans(data[, 12:15])]
data[, temp := rowMeans(data[, 17:20])/10]
data[, humidity := rowMeans(data[, 22:25])]
if(plotError == TRUE) {
data[, error := as.numeric(V4)]
data <- data[, c("time", "light", "temp", "humidity", "error"), with = FALSE]
} else {
data <- data[, c("time", "light", "temp", "humidity"), with = FALSE]
}
## date, start and stop time and LD phase and LD days
if(is.null(start_datetime)) {
datestart <- min(data[, time])
} else {
datestart <- as.POSIXct(start_datetime, format = "%Y-%m-%d %H:%M:%S")
}
if(is.null(stop_datetime)) {
datestop <- max(data[, time])
} else {
datestop <- as.POSIXct(stop_datetime, format = "%Y-%m-%d %H:%M:%S")
}
if(is.null(phaseLD)) {
phaseLD <- hours(lubridate::hour(datestart))
} else {
phaseLD <- hours(phaseLD)
}
if(!is.null(daysLD)) {
dateLD <- datestart + days(daysLD)
}
## melt data
moltendata <- melt(data, id = c('time'), variable.name = 'env.cond', value.name = 'value')
if(exists("dateLD")) {
env.plot <- ggplot(data = moltendata[time %between% c(datestart, datestop)], aes(x = time, y = value, colour = env.cond)) +
stat_ld_annotations(phase = phaseLD, l_duration = hours(durationL), x_limits = c(datestart, dateLD),
ld_colours = c("yellow", "dark grey"),
alpha = 0.2, height = 1, outline = NA, ypos = "top") +
stat_ld_annotations(phase = phaseLD, l_duration = hours(durationL), x_limits = c(dateLD, datestop),
ld_colours = c("light grey", "dark grey"),
alpha = 0.2, height = 1, outline = NA, ypos = "top") +
geom_line() +
#scale_x_datetime(breaks = scales::date_breaks('1 day'), expand = c(0,0)) +
facet_wrap( ~ env.cond, nrow = 3, scales = "free_y", labeller = label_wrap_gen(multi_line=FALSE)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
axis.title = element_blank(),
legend.position = "none")
} else {
env.plot <- ggplot(data = moltendata[time %between% c(datestart, datestop)], aes(x = time, y = value, colour = env.cond)) +
stat_ld_annotations(phase = phaseLD, l_duration = hours(durationL), x_limits = c(datestart, datestop),
ld_colours = c("yellow", "dark grey"),
alpha = 0.2, height = 1, outline = NA, ypos = "top") +
geom_line() +
#scale_x_datetime(breaks = scales::date_breaks('1 day'), expand = c(0,0)) +
facet_wrap( ~ env.cond, nrow = 3, scales = "free_y", labeller = label_wrap_gen(multi_line=FALSE)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
axis.title = element_blank(),
legend.position = "none")
}
print(env.plot)
ggsave(filename = paste0("./figures/environmental/", monitorID, "_", datestart, "-", datestop, ".pdf"),
height = 27,
width = 48,
units = "cm",
plot = env.plot,
device = "pdf")
message("Figures output to /figures/environmental/")
}
env_plottR(start_datetime = "2019-12-10 00:00:00", stop_datetime = "2019-12-16 00:00:00", phaseLD = 8, durationL = 13, daysLD = 2)
env_plottR(start_datetime = "2019-12-10 00:00:00", stop_datetime = "2019-12-12 00:00:00", phaseLD = 7, durationL = 13)
env_plottR <- function(start_datetime = NULL, stop_datetime = NULL, daysLD = NULL, phaseLD = NULL, plotError = FALSE, durationL = 12, ...) {
if (!dir.exists("./figures/environmental/")) {
dir.create("./figures/environmental/", recursive = TRUE)
}
filename <- file.choose()
monitorID <- basename(tools::file_path_sans_ext(filename))
## read in raw data file
data <- fread(filename, stringsAsFactors = FALSE)
## convert time in data file to POSIX datetime
data[, time :=  as.POSIXct(paste(V2,V3), format="%d %b %y %H:%M:%S")]
## grab data columns and rename
data[, light := rowMeans(data[, 12:15])]
data[, temp := rowMeans(data[, 17:20])/10]
data[, humidity := rowMeans(data[, 22:25])]
if(plotError == TRUE) {
data[, error := as.numeric(V4)]
data <- data[, c("time", "light", "temp", "humidity", "error"), with = FALSE]
} else {
data <- data[, c("time", "light", "temp", "humidity"), with = FALSE]
}
## date, start and stop time and LD phase and LD days
if(is.null(start_datetime)) {
datestart <- min(data[, time])
} else {
datestart <- as.POSIXct(start_datetime, format = "%Y-%m-%d %H:%M:%S")
}
if(is.null(stop_datetime)) {
datestop <- max(data[, time])
} else {
datestop <- as.POSIXct(stop_datetime, format = "%Y-%m-%d %H:%M:%S")
}
if(is.null(phaseLD)) {
phaseLD <- hours(lubridate::hour(datestart))
} else {
phaseLD <- hours(phaseLD)
}
if(!is.null(daysLD)) {
dateLD <- datestart + days(daysLD)
}
## melt data
moltendata <- melt(data, id = c('time'), variable.name = 'env.cond', value.name = 'value')
if(exists("dateLD")) {
env.plot <- ggplot(data = moltendata[time %between% c(datestart, datestop)], aes(x = time, y = value, colour = env.cond)) +
stat_ld_annotations(phase = phaseLD, l_duration = hours(durationL), x_limits = c(datestart, dateLD),
ld_colours = c("yellow", "dark grey"),
alpha = 0.2, height = 1, outline = NA, ypos = "top") +
stat_ld_annotations(phase = phaseLD, l_duration = hours(durationL), x_limits = c(dateLD, datestop),
ld_colours = c("light grey", "dark grey"),
alpha = 0.2, height = 1, outline = NA, ypos = "top") +
geom_line() +
scale_x_datetime(expand = c(0,0)) +
facet_wrap( ~ env.cond, nrow = 3, scales = "free_y", labeller = label_wrap_gen(multi_line=FALSE)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
axis.title = element_blank(),
legend.position = "none")
} else {
env.plot <- ggplot(data = moltendata[time %between% c(datestart, datestop)], aes(x = time, y = value, colour = env.cond)) +
stat_ld_annotations(phase = phaseLD, l_duration = hours(durationL), x_limits = c(datestart, datestop),
ld_colours = c("yellow", "dark grey"),
alpha = 0.2, height = 1, outline = NA, ypos = "top") +
geom_line() +
scale_x_datetime(expand = c(0,0)) +
facet_wrap( ~ env.cond, nrow = 3, scales = "free_y", labeller = label_wrap_gen(multi_line=FALSE)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
axis.title = element_blank(),
legend.position = "none")
}
print(env.plot)
ggsave(filename = paste0("./figures/environmental/", monitorID, "_", datestart, "_", datestop, ".pdf"),
height = 27,
width = 48,
units = "cm",
plot = env.plot,
device = "pdf")
message("Figures output to /figures/environmental/")
}
env_plottR()
env_plottR(start_datetime = "2019-12-10 00:00:00", stop_datetime = "2019-12-12 00:00:00", phaseLD = 7, durationL = 13)
env_plottR <- function(start_datetime = NULL, stop_datetime = NULL, daysLD = NULL, phaseLD = NULL, plotError = FALSE, durationL = 12, ...) {
if (!dir.exists("./figures/environmental/")) {
dir.create("./figures/environmental/", recursive = TRUE)
}
filename <- file.choose()
monitorID <- basename(tools::file_path_sans_ext(filename))
## read in raw data file
data <- fread(filename, stringsAsFactors = FALSE)
## convert time in data file to POSIX datetime
data[, time :=  as.POSIXct(paste(V2,V3), format="%d %b %y %H:%M:%S")]
## grab data columns and rename
data[, light := rowMeans(data[, 12:15])]
data[, temp := rowMeans(data[, 17:20])/10]
data[, humidity := rowMeans(data[, 22:25])]
if(plotError == TRUE) {
data[, error := as.numeric(V4)]
data <- data[, c("time", "light", "temp", "humidity", "error"), with = FALSE]
} else {
data <- data[, c("time", "light", "temp", "humidity"), with = FALSE]
}
## date, start and stop time and LD phase and LD days
if(is.null(start_datetime)) {
datestart <- min(data[, time])
} else {
datestart <- as.POSIXct(start_datetime, format = "%Y-%m-%d %H:%M:%S")
}
if(is.null(stop_datetime)) {
datestop <- max(data[, time])
} else {
datestop <- as.POSIXct(stop_datetime, format = "%Y-%m-%d %H:%M:%S")
}
if(is.null(phaseLD)) {
phaseLD <- hours(lubridate::hour(datestart))
} else {
phaseLD <- hours(phaseLD)
}
if(!is.null(daysLD)) {
dateLD <- datestart + days(daysLD)
}
## melt data
moltendata <- melt(data, id = c('time'), variable.name = 'env.cond', value.name = 'value')
if(exists("dateLD")) {
env.plot <- ggplot(data = moltendata[time %between% c(datestart, datestop)], aes(x = time, y = value, colour = env.cond)) +
stat_ld_annotations(phase = phaseLD, l_duration = hours(durationL), x_limits = c(datestart, dateLD),
ld_colours = c("yellow", "dark grey"),
alpha = 0.2, height = 1, outline = NA, ypos = "top") +
stat_ld_annotations(phase = phaseLD, l_duration = hours(durationL), x_limits = c(dateLD, datestop),
ld_colours = c("light grey", "dark grey"),
alpha = 0.2, height = 1, outline = NA, ypos = "top") +
geom_line(size = 1) +
scale_x_datetime(expand = c(0,0)) +
facet_wrap( ~ env.cond, nrow = 3, scales = "free_y", labeller = label_wrap_gen(multi_line=FALSE)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
axis.title = element_blank(),
legend.position = "none")
} else {
env.plot <- ggplot(data = moltendata[time %between% c(datestart, datestop)], aes(x = time, y = value, colour = env.cond)) +
stat_ld_annotations(phase = phaseLD, l_duration = hours(durationL), x_limits = c(datestart, datestop),
ld_colours = c("yellow", "dark grey"),
alpha = 0.2, height = 1, outline = NA, ypos = "top") +
geom_line(size = 1) +
scale_x_datetime(expand = c(0,0)) +
facet_wrap( ~ env.cond, nrow = 3, scales = "free_y", labeller = label_wrap_gen(multi_line=FALSE)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
axis.title = element_blank(),
legend.position = "none")
}
print(env.plot)
ggsave(filename = paste0("./figures/environmental/", monitorID, "_", datestart, "_", datestop, ".pdf"),
height = 27,
width = 48,
units = "cm",
plot = env.plot,
device = "pdf")
message("Figures output to /figures/environmental/")
}
env_plottR(start_datetime = "2019-12-10 00:00:00", stop_datetime = "2019-12-11 00:00:00", phaseLD = 7, durationL = 13)
roxygen2::roxygenise()
library(circatools)
roxygen2::roxygenise()
library(circatools)
library(circatools)
roxygen2::roxygenise()
library(circatools)
library(circatools)
library(circatools)
library(circatools)
library(circatools)
library(circatools)
library(circatools)
shiny::runApp('shinyenvPlottR')
runApp('shinyenvPlottR')
runApp('shinyenvPlottR')
runApp('shinyenvPlottR')
runApp('shinyenvPlottR')
runApp()
runApp('shinyenvPlottR')
runApp()
runApp('shinyenvPlottR')
runApp('shinyenvPlottR')
runApp('shinyenvPlottR')
runApp('shinyenvPlottR')
runApp('shinyenvPlottR')
runApp('shinyenvPlottR')
runApp('shinyenvPlottR')
runApp('shinyenvPlottR')
runApp('shinyenvPlottR')
runApp('shinyenvPlottR')
runApp('shinyenvPlottR')
runApp('shinyenvPlottR')
runApp('shinyenvPlottR')
runApp('shinyenvPlottR')
runApp('shinyenvPlottR')
shiny::runApp('shinyenvPlottR')
library(circatools)
roxygen2::roxygenise()
library(circatools)
#' @export
#'
runenvPlottR <- function() {
appDir <- system.file("shinyenvPlottr", package = "circatools")
if (appDir == "") {
stop("Could not find example directory. Try re-installing `circatools`.", call. = FALSE)
}
shiny::runApp(appDir, display.mode = "normal")
}
runenvPlottR()
#' @export
#'
runenvPlottR <- function() {
appDir <- system.file("shinyenvPlottR", package = "circatools")
if (appDir == "") {
stop("Could not find example directory. Try re-installing `circatools`.", call. = FALSE)
}
shiny::runApp(appDir, display.mode = "normal")
}
runenvPlottR()
appDir <- system.file("shinyenvPlottR", package = "circatools")
library(circatools)
shiny::runApp('inst/shinyenvPlottR')
filename <- file.choose()
data <- fread(filename, stringsAsFactors = FALSE)
library(data.table)
data <- fread(filename, stringsAsFactors = FALSE)
data[, time :=  as.POSIXct(paste(V2,V3), format="%d %b %y %H:%M:%S")]
data[, light := rowMeans(data[, 12:15])]
data[, temp := rowMeans(data[, 17:20])/10]
data[, humidity := rowMeans(data[, 22:25])]
data[, error := as.numeric(V4)]
data <- data[, c("time", "light", "temp", "humidity", "error"), with = FALSE]
View(data)
shiny::runApp('inst/shinyenvPlottR')
runApp()
runApp('inst/shinyenvPlottR')
rm(data)
runApp('inst/shinyenvPlottR')
rm(filename)
runApp('inst/shinyenvPlottR')
runApp('inst/shinyenvPlottR')
runApp('inst/shinyenvPlottR')
runApp('inst/shinyenvPlottR')
options(shiny.trace = TRUE)
runApp('inst/shinyenvPlottR')
runApp('inst/shinyenvPlottR')
runApp('inst/shinyenvPlottR')
runApp('inst/shinyenvPlottR')
runApp('inst/shinyenvPlottR')
runApp('inst/shinyenvPlottR')
runApp('inst/shinyenvPlottR')
runApp('inst/shinyenvPlottR')
filename <- file.choose()
data <- fread(filename, stringsAsFactors = FALSE)
data[, time :=  as.POSIXct(paste(V2,V3), format="%d %b %y %H:%M:%S")]
data[, light := rowMeans(data[, 12:15])]
data[, temp := rowMeans(data[, 17:20])/10]
data[, humidity := rowMeans(data[, 22:25])]
data[, error := as.numeric(V4)]
data <- data[, c("time", "light", "temp", "humidity", "error"), with = FALSE]
ggplot(data = data, aes(x = time, y = temp, colour = "temp")) +
geom_line(size = 1) +
coord_cartesian(xlim = rvs$x, ylim = rvs$ytemp) +
scale_colour_manual(values = c("temp" = "#e41a1c")) +
scale_x_datetime(expand = c(0,0)) +
ylab("temperature") +
scale_y_continuous(labels = function(x) formatC(x, width = 4)) +
theme_minimal_grid(font_size = 12) +
theme(axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.text.y = element_text(margin = margin(t = 0, r = 5, b = 0, l = 5, unit = "mm"), hjust = 0.5),
legend.position = "none")
ggplot(data = data, aes(x = time, y = temp, colour = "temp")) +
geom_line(size = 1) +
#coord_cartesian(xlim = rvs$x, ylim = rvs$ytemp) +
scale_colour_manual(values = c("temp" = "#e41a1c")) +
scale_x_datetime(expand = c(0,0)) +
ylab("temperature") +
scale_y_continuous(labels = function(x) formatC(x, width = 4)) +
theme_minimal_grid(font_size = 12) +
theme(axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.text.y = element_text(margin = margin(t = 0, r = 5, b = 0, l = 5, unit = "mm"), hjust = 0.5),
legend.position = "none")
runApp('inst/shinyenvPlottR')
temp.plot <- ggplot(data = data, aes(x = time, y = temp, colour = "temp")) +
geom_line(size = 1) +
coord_cartesian(xlim = rvs$x, ylim = rvs$ytemp) +
scale_colour_manual(values = c("temp" = "#e41a1c")) +
scale_x_datetime(expand = c(0,0)) +
ylab("temperature") +
scale_y_continuous(labels = function(x) formatC(x, width = 4)) +
theme_minimal_grid(font_size = 12) +
theme(axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.text.y = element_text(margin = margin(t = 0, r = 5, b = 0, l = 5, unit = "mm"), hjust = 0.5),
legend.position = "none")
temp.plot <- ggplot(data = data, aes(x = time, y = temp, colour = "temp")) +
geom_line(size = 1) +
#coord_cartesian(xlim = rvs$x, ylim = rvs$ytemp) +
scale_colour_manual(values = c("temp" = "#e41a1c")) +
scale_x_datetime(expand = c(0,0)) +
ylab("temperature") +
scale_y_continuous(labels = function(x) formatC(x, width = 4)) +
theme_minimal_grid(font_size = 12) +
theme(axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.text.y = element_text(margin = margin(t = 0, r = 5, b = 0, l = 5, unit = "mm"), hjust = 0.5),
legend.position = "none")
temp.plot
grid::unit.pmax(temp.plot)
temp.plot <- ggplot_gtable(ggplot_build(temp.plot))
temp.plot
maxWidth <- grid::unit.pmax(temp.plot$widths[2:3])
View(maxWidth)
light.plot <- ggplot(data = data, aes(x = time, y = light, colour = "light")) +
geom_line(size = 1) +
coord_cartesian(xlim = rvs$x, ylim = rvs$ylight) +
scale_colour_manual(values = c("light" = "#ff7f00")) +
scale_x_datetime(expand = c(0,0)) +
ylab("light") +
scale_y_continuous(labels = function(x) formatC(x, width = 4)) +
theme_minimal_grid(font_size = 12) +
theme(axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.text.y = element_text(margin = margin(t = 0, r = 5, b = 0, l = 5, unit = "mm"), hjust = 0.5),
legend.position = "none")
light.plot <- ggplot(data = data, aes(x = time, y = light, colour = "light")) +
geom_line(size = 1) +
#coord_cartesian(xlim = rvs$x, ylim = rvs$ylight) +
scale_colour_manual(values = c("light" = "#ff7f00")) +
scale_x_datetime(expand = c(0,0)) +
ylab("light") +
scale_y_continuous(labels = function(x) formatC(x, width = 4)) +
theme_minimal_grid(font_size = 12) +
theme(axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.text.y = element_text(margin = margin(t = 0, r = 5, b = 0, l = 5, unit = "mm"), hjust = 0.5),
legend.position = "none")
light.plot <- ggplot_gtable(ggplot_build(light.plot))
maxWidth <- grid::unit.pmax(light.plot$widths[2:3], temp.plot$widths[2:3])
light.plot$widths[2:3] <- maxWidth
temp.plot$widths[2:3] <- maxWidth
View(light.plot)
gridExtra::grid.arrange(light.plot)
gridExtra::grid.arrange(temp.plot)
gridExtra::grid.arrange(light.plot, temp.plot, ncol = 1)
runApp('inst/shinyenvPlottR')
runApp('inst/shinyenvPlottR')
shiny::runApp('inst/shinyenvPlottR')
library(circatools)
quote(treatment)
library(circatools)
library(circatools)
library(circatools)
roxygen2::roxygenise()
library(circatools)
